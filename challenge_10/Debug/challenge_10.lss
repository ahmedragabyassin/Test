
challenge_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000978  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000440  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 06 03 	call	0x60c	; 0x60c <main>
  64:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay>:
 */ 

#include "Delay.h"

void Delay(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <Delay+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <Delay+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	for (uint32 i=0; i<20000;)
  78:	19 82       	std	Y+1, r1	; 0x01
  7a:	1a 82       	std	Y+2, r1	; 0x02
  7c:	1b 82       	std	Y+3, r1	; 0x03
  7e:	1c 82       	std	Y+4, r1	; 0x04
  80:	0b c0       	rjmp	.+22     	; 0x98 <Delay+0x2c>
	{
		i++;
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	9a 81       	ldd	r25, Y+2	; 0x02
  86:	ab 81       	ldd	r26, Y+3	; 0x03
  88:	bc 81       	ldd	r27, Y+4	; 0x04
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	a1 1d       	adc	r26, r1
  8e:	b1 1d       	adc	r27, r1
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	9a 83       	std	Y+2, r25	; 0x02
  94:	ab 83       	std	Y+3, r26	; 0x03
  96:	bc 83       	std	Y+4, r27	; 0x04

#include "Delay.h"

void Delay(void)
{
	for (uint32 i=0; i<20000;)
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	9a 81       	ldd	r25, Y+2	; 0x02
  9c:	ab 81       	ldd	r26, Y+3	; 0x03
  9e:	bc 81       	ldd	r27, Y+4	; 0x04
  a0:	80 32       	cpi	r24, 0x20	; 32
  a2:	2e e4       	ldi	r18, 0x4E	; 78
  a4:	92 07       	cpc	r25, r18
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	a2 07       	cpc	r26, r18
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	b2 07       	cpc	r27, r18
  ae:	48 f3       	brcs	.-46     	; 0x82 <Delay+0x16>
	{
		i++;
	}
}
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_WritePin>:

/************************************************************************/
/* Write value 0 or 1 on port                                           */
/************************************************************************/
void DIO_WritePin(uint8 PinNum, uint8 PinValue)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_WritePin+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= 0) && (PinNum < 8))
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	60 f5       	brcc	.+88     	; 0x12a <DIO_WritePin+0x6c>
	{
		if (PinValue == 1)
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	a1 f4       	brne	.+40     	; 0x100 <DIO_WritePin+0x42>
		{
			SET_BIT(PORTA,PinNum);
  d8:	ab e3       	ldi	r26, 0x3B	; 59
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	eb e3       	ldi	r30, 0x3B	; 59
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_WritePin+0x38>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_WritePin+0x34>
  fa:	84 2b       	or	r24, r20
  fc:	8c 93       	st	X, r24
  fe:	bc c0       	rjmp	.+376    	; 0x278 <DIO_WritePin+0x1ba>
		}
		else
		{
			CLEAR_BIT(PORTA,PinNum);
 100:	ab e3       	ldi	r26, 0x3B	; 59
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e3       	ldi	r30, 0x3B	; 59
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_WritePin+0x60>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_WritePin+0x5c>
 122:	80 95       	com	r24
 124:	84 23       	and	r24, r20
 126:	8c 93       	st	X, r24
 128:	a7 c0       	rjmp	.+334    	; 0x278 <DIO_WritePin+0x1ba>
		}
	}
	else if ((PinNum >= 8) && (PinNum < 16))
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	a8 f1       	brcs	.+106    	; 0x19a <DIO_WritePin+0xdc>
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	80 31       	cpi	r24, 0x10	; 16
 134:	90 f5       	brcc	.+100    	; 0x19a <DIO_WritePin+0xdc>
	{
		if (PinValue == 1)
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	b9 f4       	brne	.+46     	; 0x16a <DIO_WritePin+0xac>
		{
			SET_BIT(PORTB,(PinNum-8));
 13c:	a8 e3       	ldi	r26, 0x38	; 56
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e8 e3       	ldi	r30, 0x38	; 56
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	88 2f       	mov	r24, r24
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9c 01       	movw	r18, r24
 150:	28 50       	subi	r18, 0x08	; 8
 152:	30 40       	sbci	r19, 0x00	; 0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_WritePin+0xa2>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_WritePin+0x9e>
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
 168:	87 c0       	rjmp	.+270    	; 0x278 <DIO_WritePin+0x1ba>
		}
		else
		{
			CLEAR_BIT(PORTB,(PinNum-8));
 16a:	a8 e3       	ldi	r26, 0x38	; 56
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e8 e3       	ldi	r30, 0x38	; 56
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	9c 01       	movw	r18, r24
 17e:	28 50       	subi	r18, 0x08	; 8
 180:	30 40       	sbci	r19, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 2e       	mov	r0, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_WritePin+0xd0>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_WritePin+0xcc>
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	8c 93       	st	X, r24
 198:	6f c0       	rjmp	.+222    	; 0x278 <DIO_WritePin+0x1ba>
		}
	}
	else if((PinNum >= 16) && (PinNum < 24))
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	80 31       	cpi	r24, 0x10	; 16
 19e:	a8 f1       	brcs	.+106    	; 0x20a <DIO_WritePin+0x14c>
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	88 31       	cpi	r24, 0x18	; 24
 1a4:	90 f5       	brcc	.+100    	; 0x20a <DIO_WritePin+0x14c>
	{
		if(PinValue == 1)
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	b9 f4       	brne	.+46     	; 0x1da <DIO_WritePin+0x11c>
		{
			SET_BIT(PORTC,(PinNum-16));
 1ac:	a5 e3       	ldi	r26, 0x35	; 53
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e5 e3       	ldi	r30, 0x35	; 53
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	9c 01       	movw	r18, r24
 1c0:	20 51       	subi	r18, 0x10	; 16
 1c2:	30 40       	sbci	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_WritePin+0x112>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_WritePin+0x10e>
 1d4:	84 2b       	or	r24, r20
 1d6:	8c 93       	st	X, r24
 1d8:	4f c0       	rjmp	.+158    	; 0x278 <DIO_WritePin+0x1ba>
		}
		else
		{
			CLEAR_BIT(PORTC,(PinNum-16));
 1da:	a5 e3       	ldi	r26, 0x35	; 53
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	e5 e3       	ldi	r30, 0x35	; 53
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	48 2f       	mov	r20, r24
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	9c 01       	movw	r18, r24
 1ee:	20 51       	subi	r18, 0x10	; 16
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_WritePin+0x140>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_WritePin+0x13c>
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	8c 93       	st	X, r24
 208:	37 c0       	rjmp	.+110    	; 0x278 <DIO_WritePin+0x1ba>
		}
	}
	else if((PinNum >= 24) && (PinNum < 32))
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	88 31       	cpi	r24, 0x18	; 24
 20e:	a0 f1       	brcs	.+104    	; 0x278 <DIO_WritePin+0x1ba>
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	80 32       	cpi	r24, 0x20	; 32
 214:	88 f5       	brcc	.+98     	; 0x278 <DIO_WritePin+0x1ba>
	{
		if (PinValue == 1)
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	b9 f4       	brne	.+46     	; 0x24a <DIO_WritePin+0x18c>
		{
			SET_BIT(PORTD,(PinNum-24));
 21c:	a2 e3       	ldi	r26, 0x32	; 50
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e2 e3       	ldi	r30, 0x32	; 50
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	9c 01       	movw	r18, r24
 230:	28 51       	subi	r18, 0x18	; 24
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WritePin+0x182>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WritePin+0x17e>
 244:	84 2b       	or	r24, r20
 246:	8c 93       	st	X, r24
 248:	17 c0       	rjmp	.+46     	; 0x278 <DIO_WritePin+0x1ba>
		}
		else
		{
			CLEAR_BIT(PORTD,(PinNum-24));
 24a:	a2 e3       	ldi	r26, 0x32	; 50
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	e2 e3       	ldi	r30, 0x32	; 50
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	48 2f       	mov	r20, r24
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	9c 01       	movw	r18, r24
 25e:	28 51       	subi	r18, 0x18	; 24
 260:	30 40       	sbci	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_WritePin+0x1b0>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_WritePin+0x1ac>
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	8c 93       	st	X, r24
		}
	}
}
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	08 95       	ret

00000282 <DIO_ReadPin>:

/************************************************************************/
/* Read Pin Value                                                       */
/************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum)
{
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	00 d0       	rcall	.+0      	; 0x288 <DIO_ReadPin+0x6>
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	89 83       	std	Y+1, r24	; 0x01
		if((PinNum >= 0) && (PinNum <8))
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	90 f4       	brcc	.+36     	; 0x2ba <DIO_ReadPin+0x38>
		{
			return GET_BIT(PINA,PinNum);
 296:	e9 e3       	ldi	r30, 0x39	; 57
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	48 2f       	mov	r20, r24
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 2e       	mov	r0, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_ReadPin+0x2e>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_ReadPin+0x2a>
 2b4:	84 23       	and	r24, r20
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	52 c0       	rjmp	.+164    	; 0x35e <DIO_ReadPin+0xdc>
		}
		else if((PinNum >= 8) && (PinNum < 16))
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	c0 f0       	brcs	.+48     	; 0x2f0 <DIO_ReadPin+0x6e>
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	80 31       	cpi	r24, 0x10	; 16
 2c4:	a8 f4       	brcc	.+42     	; 0x2f0 <DIO_ReadPin+0x6e>
		{
			return GET_BIT(PINB,(PinNum-8));
 2c6:	e6 e3       	ldi	r30, 0x36	; 54
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	88 2f       	mov	r24, r24
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9c 01       	movw	r18, r24
 2d6:	28 50       	subi	r18, 0x08	; 8
 2d8:	30 40       	sbci	r19, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_ReadPin+0x64>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_ReadPin+0x60>
 2ea:	84 23       	and	r24, r20
 2ec:	8a 83       	std	Y+2, r24	; 0x02
 2ee:	37 c0       	rjmp	.+110    	; 0x35e <DIO_ReadPin+0xdc>
		}
		else if((PinNum >= 16) && (PinNum < 24))
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	80 31       	cpi	r24, 0x10	; 16
 2f4:	c0 f0       	brcs	.+48     	; 0x326 <DIO_ReadPin+0xa4>
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	88 31       	cpi	r24, 0x18	; 24
 2fa:	a8 f4       	brcc	.+42     	; 0x326 <DIO_ReadPin+0xa4>
		{
			return GET_BIT(PINC,(PinNum-16));
 2fc:	e3 e3       	ldi	r30, 0x33	; 51
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 2f       	mov	r24, r24
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	9c 01       	movw	r18, r24
 30c:	20 51       	subi	r18, 0x10	; 16
 30e:	30 40       	sbci	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_ReadPin+0x9a>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_ReadPin+0x96>
 320:	84 23       	and	r24, r20
 322:	8a 83       	std	Y+2, r24	; 0x02
 324:	1c c0       	rjmp	.+56     	; 0x35e <DIO_ReadPin+0xdc>
		}
		else if((PinNum >= 24) && (PinNum < 32))
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	88 31       	cpi	r24, 0x18	; 24
 32a:	c0 f0       	brcs	.+48     	; 0x35c <DIO_ReadPin+0xda>
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	80 32       	cpi	r24, 0x20	; 32
 330:	a8 f4       	brcc	.+42     	; 0x35c <DIO_ReadPin+0xda>
		{
			return GET_BIT(PIND,(PinNum-24));
 332:	e0 e3       	ldi	r30, 0x30	; 48
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	48 2f       	mov	r20, r24
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	88 2f       	mov	r24, r24
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	9c 01       	movw	r18, r24
 342:	28 51       	subi	r18, 0x18	; 24
 344:	30 40       	sbci	r19, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 2e       	mov	r0, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_ReadPin+0xd0>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_ReadPin+0xcc>
 356:	84 23       	and	r24, r20
 358:	8a 83       	std	Y+2, r24	; 0x02
 35a:	01 c0       	rjmp	.+2      	; 0x35e <DIO_ReadPin+0xdc>
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_ReadPin+0xe0>
		}
}
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	8b 83       	std	Y+3, r24	; 0x03
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	cf 91       	pop	r28
 36c:	df 91       	pop	r29
 36e:	08 95       	ret

00000370 <DIO_SetPinDirection>:

/************************************************************************/
/* Set Pin Direction                                                    */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum, uint8 PinValue)
{
 370:	df 93       	push	r29
 372:	cf 93       	push	r28
 374:	00 d0       	rcall	.+0      	; 0x376 <DIO_SetPinDirection+0x6>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= 0) && (PinNum <8))
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	88 30       	cpi	r24, 0x08	; 8
 382:	60 f5       	brcc	.+88     	; 0x3dc <DIO_SetPinDirection+0x6c>
	{
		if (PinValue == 1)
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	a1 f4       	brne	.+40     	; 0x3b2 <DIO_SetPinDirection+0x42>
		{
			SET_BIT(DDRA,(PinNum));
 38a:	aa e3       	ldi	r26, 0x3A	; 58
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	ea e3       	ldi	r30, 0x3A	; 58
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	48 2f       	mov	r20, r24
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 2e       	mov	r0, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_SetPinDirection+0x38>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_SetPinDirection+0x34>
 3ac:	84 2b       	or	r24, r20
 3ae:	8c 93       	st	X, r24
 3b0:	bc c0       	rjmp	.+376    	; 0x52a <DIO_SetPinDirection+0x1ba>
		}
		else
		{
			CLEAR_BIT(DDRA,(PinNum));
 3b2:	aa e3       	ldi	r26, 0x3A	; 58
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	ea e3       	ldi	r30, 0x3A	; 58
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_SetPinDirection+0x60>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_SetPinDirection+0x5c>
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	a7 c0       	rjmp	.+334    	; 0x52a <DIO_SetPinDirection+0x1ba>
		}
	}
	else if ((PinNum >= 8) && (PinNum < 16))
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	a8 f1       	brcs	.+106    	; 0x44c <DIO_SetPinDirection+0xdc>
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	80 31       	cpi	r24, 0x10	; 16
 3e6:	90 f5       	brcc	.+100    	; 0x44c <DIO_SetPinDirection+0xdc>
	{
		if (PinValue == 1)
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	b9 f4       	brne	.+46     	; 0x41c <DIO_SetPinDirection+0xac>
		{
			SET_BIT(DDRB,(PinNum-8));
 3ee:	a7 e3       	ldi	r26, 0x37	; 55
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e7 e3       	ldi	r30, 0x37	; 55
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	88 2f       	mov	r24, r24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	9c 01       	movw	r18, r24
 402:	28 50       	subi	r18, 0x08	; 8
 404:	30 40       	sbci	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 2e       	mov	r0, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_SetPinDirection+0xa2>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_SetPinDirection+0x9e>
 416:	84 2b       	or	r24, r20
 418:	8c 93       	st	X, r24
 41a:	87 c0       	rjmp	.+270    	; 0x52a <DIO_SetPinDirection+0x1ba>
			//DDRB |= (1<<(PinNum-8));
		}
		else
		{
			CLEAR_BIT(DDRB,(PinNum-8));
 41c:	a7 e3       	ldi	r26, 0x37	; 55
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e7 e3       	ldi	r30, 0x37	; 55
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	48 2f       	mov	r20, r24
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	9c 01       	movw	r18, r24
 430:	28 50       	subi	r18, 0x08	; 8
 432:	30 40       	sbci	r19, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 2e       	mov	r0, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_SetPinDirection+0xd0>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_SetPinDirection+0xcc>
 444:	80 95       	com	r24
 446:	84 23       	and	r24, r20
 448:	8c 93       	st	X, r24
 44a:	6f c0       	rjmp	.+222    	; 0x52a <DIO_SetPinDirection+0x1ba>
			//DDRB &=~ (1<<(PinNum-8));
		}
	}
	else if ((PinNum >= 16) && (PinNum < 24))
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	80 31       	cpi	r24, 0x10	; 16
 450:	a8 f1       	brcs	.+106    	; 0x4bc <DIO_SetPinDirection+0x14c>
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	90 f5       	brcc	.+100    	; 0x4bc <DIO_SetPinDirection+0x14c>
	{
		if (PinValue == 1)
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	b9 f4       	brne	.+46     	; 0x48c <DIO_SetPinDirection+0x11c>
		{
			SET_BIT(DDRC,(PinNum-16));
 45e:	a4 e3       	ldi	r26, 0x34	; 52
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e4 e3       	ldi	r30, 0x34	; 52
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	48 2f       	mov	r20, r24
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9c 01       	movw	r18, r24
 472:	20 51       	subi	r18, 0x10	; 16
 474:	30 40       	sbci	r19, 0x00	; 0
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 2e       	mov	r0, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_SetPinDirection+0x112>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_SetPinDirection+0x10e>
 486:	84 2b       	or	r24, r20
 488:	8c 93       	st	X, r24
 48a:	4f c0       	rjmp	.+158    	; 0x52a <DIO_SetPinDirection+0x1ba>
		}
		else
		{
			CLEAR_BIT(DDRC,(PinNum-16));
 48c:	a4 e3       	ldi	r26, 0x34	; 52
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	e4 e3       	ldi	r30, 0x34	; 52
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	48 2f       	mov	r20, r24
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	88 2f       	mov	r24, r24
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	9c 01       	movw	r18, r24
 4a0:	20 51       	subi	r18, 0x10	; 16
 4a2:	30 40       	sbci	r19, 0x00	; 0
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 2e       	mov	r0, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_SetPinDirection+0x140>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	0a 94       	dec	r0
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_SetPinDirection+0x13c>
 4b4:	80 95       	com	r24
 4b6:	84 23       	and	r24, r20
 4b8:	8c 93       	st	X, r24
 4ba:	37 c0       	rjmp	.+110    	; 0x52a <DIO_SetPinDirection+0x1ba>
		}
	}
	else if ((PinNum >= 24) && (PinNum < 32))
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	88 31       	cpi	r24, 0x18	; 24
 4c0:	a0 f1       	brcs	.+104    	; 0x52a <DIO_SetPinDirection+0x1ba>
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	80 32       	cpi	r24, 0x20	; 32
 4c6:	88 f5       	brcc	.+98     	; 0x52a <DIO_SetPinDirection+0x1ba>
	{
		if (PinValue == 1)
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	b9 f4       	brne	.+46     	; 0x4fc <DIO_SetPinDirection+0x18c>
		{
			SET_BIT(DDRD,(PinNum-24));
 4ce:	a1 e3       	ldi	r26, 0x31	; 49
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	e1 e3       	ldi	r30, 0x31	; 49
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	88 2f       	mov	r24, r24
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9c 01       	movw	r18, r24
 4e2:	28 51       	subi	r18, 0x18	; 24
 4e4:	30 40       	sbci	r19, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 2e       	mov	r0, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_SetPinDirection+0x182>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_SetPinDirection+0x17e>
 4f6:	84 2b       	or	r24, r20
 4f8:	8c 93       	st	X, r24
 4fa:	17 c0       	rjmp	.+46     	; 0x52a <DIO_SetPinDirection+0x1ba>
		}
		else
		{
			CLEAR_BIT(DDRD,(PinNum-24));
 4fc:	a1 e3       	ldi	r26, 0x31	; 49
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e1 e3       	ldi	r30, 0x31	; 49
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	48 2f       	mov	r20, r24
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	9c 01       	movw	r18, r24
 510:	28 51       	subi	r18, 0x18	; 24
 512:	30 40       	sbci	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_SetPinDirection+0x1b0>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_SetPinDirection+0x1ac>
 524:	80 95       	com	r24
 526:	84 23       	and	r24, r20
 528:	8c 93       	st	X, r24
		}
	}
}
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	cf 91       	pop	r28
 530:	df 91       	pop	r29
 532:	08 95       	ret

00000534 <TimerInit>:
 */ 

#include "Timer.h"

void TimerInit(void)
{
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
	/* CTC MODE */
	TCCR0 |= (1<<WGM01);
 53c:	a3 e5       	ldi	r26, 0x53	; 83
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e3 e5       	ldi	r30, 0x53	; 83
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	88 60       	ori	r24, 0x08	; 8
 548:	8c 93       	st	X, r24
//	TCCR0 |= (1<<COM01);
	/* 64 PRESCALLER */
	TCCR0 |= (1<<CS00);
 54a:	a3 e5       	ldi	r26, 0x53	; 83
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	e3 e5       	ldi	r30, 0x53	; 83
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	81 60       	ori	r24, 0x01	; 1
 556:	8c 93       	st	X, r24
	TCCR0 |= (1<<CS01);
 558:	a3 e5       	ldi	r26, 0x53	; 83
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e3 e5       	ldi	r30, 0x53	; 83
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	82 60       	ori	r24, 0x02	; 2
 564:	8c 93       	st	X, r24
	TCNT0 =0;
 566:	e2 e5       	ldi	r30, 0x52	; 82
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	10 82       	st	Z, r1
	OCR0 = 250; /* COMPARE VALUE */
 56c:	ec e5       	ldi	r30, 0x5C	; 92
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	8a ef       	ldi	r24, 0xFA	; 250
 572:	80 83       	st	Z, r24
	
}
 574:	cf 91       	pop	r28
 576:	df 91       	pop	r29
 578:	08 95       	ret

0000057a <TimerDelay>:

void TimerDelay(uint32 n)
{
 57a:	df 93       	push	r29
 57c:	cf 93       	push	r28
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	28 97       	sbiw	r28, 0x08	; 8
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
 58e:	6d 83       	std	Y+5, r22	; 0x05
 590:	7e 83       	std	Y+6, r23	; 0x06
 592:	8f 83       	std	Y+7, r24	; 0x07
 594:	98 87       	std	Y+8, r25	; 0x08
	TimerInit();
 596:	0e 94 9a 02 	call	0x534	; 0x534 <TimerInit>
	TCNT0 =0;
 59a:	e2 e5       	ldi	r30, 0x52	; 82
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	10 82       	st	Z, r1
	for (uint32 i=0; i<n; i++)
 5a0:	19 82       	std	Y+1, r1	; 0x01
 5a2:	1a 82       	std	Y+2, r1	; 0x02
 5a4:	1b 82       	std	Y+3, r1	; 0x03
 5a6:	1c 82       	std	Y+4, r1	; 0x04
 5a8:	1b c0       	rjmp	.+54     	; 0x5e0 <TimerDelay+0x66>
	{
		while(!(TIFR&(1<<OCF0)));
 5aa:	e8 e5       	ldi	r30, 0x58	; 88
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	88 2f       	mov	r24, r24
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	82 70       	andi	r24, 0x02	; 2
 5b6:	90 70       	andi	r25, 0x00	; 0
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	b9 f3       	breq	.-18     	; 0x5aa <TimerDelay+0x30>
		TIFR |= (1<<OCF0);
 5bc:	a8 e5       	ldi	r26, 0x58	; 88
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	e8 e5       	ldi	r30, 0x58	; 88
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	82 60       	ori	r24, 0x02	; 2
 5c8:	8c 93       	st	X, r24

void TimerDelay(uint32 n)
{
	TimerInit();
	TCNT0 =0;
	for (uint32 i=0; i<n; i++)
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	9a 81       	ldd	r25, Y+2	; 0x02
 5ce:	ab 81       	ldd	r26, Y+3	; 0x03
 5d0:	bc 81       	ldd	r27, Y+4	; 0x04
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	a1 1d       	adc	r26, r1
 5d6:	b1 1d       	adc	r27, r1
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	9a 83       	std	Y+2, r25	; 0x02
 5dc:	ab 83       	std	Y+3, r26	; 0x03
 5de:	bc 83       	std	Y+4, r27	; 0x04
 5e0:	29 81       	ldd	r18, Y+1	; 0x01
 5e2:	3a 81       	ldd	r19, Y+2	; 0x02
 5e4:	4b 81       	ldd	r20, Y+3	; 0x03
 5e6:	5c 81       	ldd	r21, Y+4	; 0x04
 5e8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ea:	9e 81       	ldd	r25, Y+6	; 0x06
 5ec:	af 81       	ldd	r26, Y+7	; 0x07
 5ee:	b8 85       	ldd	r27, Y+8	; 0x08
 5f0:	28 17       	cp	r18, r24
 5f2:	39 07       	cpc	r19, r25
 5f4:	4a 07       	cpc	r20, r26
 5f6:	5b 07       	cpc	r21, r27
 5f8:	c0 f2       	brcs	.-80     	; 0x5aa <TimerDelay+0x30>
	{
		while(!(TIFR&(1<<OCF0)));
		TIFR |= (1<<OCF0);
	}
}
 5fa:	28 96       	adiw	r28, 0x08	; 8
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	cf 91       	pop	r28
 608:	df 91       	pop	r29
 60a:	08 95       	ret

0000060c <main>:
#ifndef F_CPU
#define F_CPU 16000000U
//#include <util/delay.h>
#endif
int main(void)
{
 60c:	df 93       	push	r29
 60e:	cf 93       	push	r28
 610:	00 d0       	rcall	.+0      	; 0x612 <main+0x6>
 612:	0f 92       	push	r0
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	//DIO_SetPinDirection(PIN10,IN); /* Button 1 */
	//DIO_SetPinDirection(PIN12,OUT);
	DIO_SetPinDirection(PIN13,OUT); /* LED 1 */
 618:	8d e0       	ldi	r24, 0x0D	; 13
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN14,OUT); /* LED 2 */
 620:	8e e0       	ldi	r24, 0x0E	; 14
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN15,OUT); /* LED 3 */
 628:	8f e0       	ldi	r24, 0x0F	; 15
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_SetPinDirection>
		TimerDelay(1000);
		DIO_WritePin(15,HIGH);
		TimerDelay(1000);
		DIO_WritePin(15,LOW);
		*/
			uint8 state = READY;
 630:	19 82       	std	Y+1, r1	; 0x01
			switch(state)
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	3b 83       	std	Y+3, r19	; 0x03
 63a:	2a 83       	std	Y+2, r18	; 0x02
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	9b 81       	ldd	r25, Y+3	; 0x03
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	91 05       	cpc	r25, r1
 644:	d1 f0       	breq	.+52     	; 0x67a <main+0x6e>
 646:	2a 81       	ldd	r18, Y+2	; 0x02
 648:	3b 81       	ldd	r19, Y+3	; 0x03
 64a:	22 30       	cpi	r18, 0x02	; 2
 64c:	31 05       	cpc	r19, r1
 64e:	31 f1       	breq	.+76     	; 0x69c <main+0x90>
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	9b 81       	ldd	r25, Y+3	; 0x03
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	61 f7       	brne	.-40     	; 0x630 <main+0x24>
			{
				case READY:
					state = GO;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	89 83       	std	Y+1, r24	; 0x01
					DIO_WritePin(PIN14,HIGH);
 65c:	8e e0       	ldi	r24, 0x0E	; 14
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_WritePin>
					TimerDelay(1000);
 664:	68 ee       	ldi	r22, 0xE8	; 232
 666:	73 e0       	ldi	r23, 0x03	; 3
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 bd 02 	call	0x57a	; 0x57a <TimerDelay>
					DIO_WritePin(PIN14,LOW);
 670:	8e e0       	ldi	r24, 0x0E	; 14
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_WritePin>
 678:	db cf       	rjmp	.-74     	; 0x630 <main+0x24>
					break;
				case GO:
					DIO_WritePin(PIN13,HIGH);
 67a:	8d e0       	ldi	r24, 0x0D	; 13
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_WritePin>
					TimerDelay(1000);
 682:	68 ee       	ldi	r22, 0xE8	; 232
 684:	73 e0       	ldi	r23, 0x03	; 3
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 bd 02 	call	0x57a	; 0x57a <TimerDelay>
					state = STOP;
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	89 83       	std	Y+1, r24	; 0x01
					DIO_WritePin(PIN13,LOW);
 692:	8d e0       	ldi	r24, 0x0D	; 13
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_WritePin>
 69a:	ca cf       	rjmp	.-108    	; 0x630 <main+0x24>
					break;
				case STOP:
					DIO_WritePin(PIN15,HIGH);
 69c:	8f e0       	ldi	r24, 0x0F	; 15
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_WritePin>
					TimerDelay(1000);
 6a4:	68 ee       	ldi	r22, 0xE8	; 232
 6a6:	73 e0       	ldi	r23, 0x03	; 3
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 bd 02 	call	0x57a	; 0x57a <TimerDelay>
					state = READY;
 6b0:	19 82       	std	Y+1, r1	; 0x01
					DIO_WritePin(PIN15,LOW);
 6b2:	8f e0       	ldi	r24, 0x0F	; 15
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_WritePin>
 6ba:	ba cf       	rjmp	.-140    	; 0x630 <main+0x24>

000006bc <_exit>:
 6bc:	f8 94       	cli

000006be <__stop_program>:
 6be:	ff cf       	rjmp	.-2      	; 0x6be <__stop_program>
